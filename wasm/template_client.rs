// Code generated by sails-client-gen. DO NOT EDIT.
#[allow(unused_imports)]
use sails_rs::collections::BTreeMap;
#[allow(unused_imports)]
use sails_rs::{
    calls::{Activation, Call, Query, Remoting, RemotingAction},
    prelude::*,
    String,
};
pub struct TemplateFactory<R> {
    #[allow(dead_code)]
    remoting: R,
}
impl<R> TemplateFactory<R> {
    #[allow(unused)]
    pub fn new(remoting: R) -> Self {
        Self { remoting }
    }
}
impl<R: Remoting + Clone> traits::TemplateFactory for TemplateFactory<R> {
    type Args = R::Args;
    fn new(&self) -> impl Activation<Args = R::Args> {
        RemotingAction::<_, template_factory::io::New>::new(self.remoting.clone(), ())
    }
}

pub mod template_factory {
    use super::*;
    pub mod io {
        use super::*;
        use sails_rs::calls::ActionIo;
        pub struct New(());
        impl New {
            #[allow(dead_code)]
            pub fn encode_call() -> Vec<u8> {
                <New as ActionIo>::encode_call(&())
            }
        }
        impl ActionIo for New {
            const ROUTE: &'static [u8] = &[12, 78, 101, 119];
            type Params = ();
            type Reply = ();
        }
    }
}
pub struct Service<R> {
    remoting: R,
}
impl<R> Service<R> {
    pub fn new(remoting: R) -> Self {
        Self { remoting }
    }
}
impl<R: Remoting + Clone> traits::Service for Service<R> {
    type Args = R::Args;
    fn change_number(&mut self, number: u64) -> impl Call<Output = String, Args = R::Args> {
        RemotingAction::<_, service::io::ChangeNumber>::new(self.remoting.clone(), number)
    }
    fn get_number(&self) -> impl Query<Output = u64, Args = R::Args> {
        RemotingAction::<_, service::io::GetNumber>::new(self.remoting.clone(), ())
    }
}

pub mod service {
    use super::*;

    pub mod io {
        use super::*;
        use sails_rs::calls::ActionIo;
        pub struct ChangeNumber(());
        impl ChangeNumber {
            #[allow(dead_code)]
            pub fn encode_call(number: u64) -> Vec<u8> {
                <ChangeNumber as ActionIo>::encode_call(&number)
            }
        }
        impl ActionIo for ChangeNumber {
            const ROUTE: &'static [u8] = &[
                28, 83, 101, 114, 118, 105, 99, 101, 48, 67, 104, 97, 110, 103, 101, 78, 117, 109,
                98, 101, 114,
            ];
            type Params = u64;
            type Reply = String;
        }
        pub struct GetNumber(());
        impl GetNumber {
            #[allow(dead_code)]
            pub fn encode_call() -> Vec<u8> {
                <GetNumber as ActionIo>::encode_call(&())
            }
        }
        impl ActionIo for GetNumber {
            const ROUTE: &'static [u8] = &[
                28, 83, 101, 114, 118, 105, 99, 101, 36, 71, 101, 116, 78, 117, 109, 98, 101, 114,
            ];
            type Params = ();
            type Reply = u64;
        }
    }
}

pub mod traits {
    use super::*;
    #[allow(dead_code)]
    pub trait TemplateFactory {
        type Args;
        #[allow(clippy::new_ret_no_self)]
        #[allow(clippy::wrong_self_convention)]
        fn new(&self) -> impl Activation<Args = Self::Args>;
    }

    #[allow(clippy::type_complexity)]
    pub trait Service {
        type Args;
        fn change_number(&mut self, number: u64) -> impl Call<Output = String, Args = Self::Args>;
        fn get_number(&self) -> impl Query<Output = u64, Args = Self::Args>;
    }
}
